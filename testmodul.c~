typedef struct node{
  char *key;
  char *value;
  struct node *next;
} *Node;

void emptyNode(void){
  malloc(sizeof(struct node));
}

void setEntry(char newEntry, Node list){
  list->key = malloc(strlen(newEntry) + 1);
  strcpy(list->key, newEntry);
}

Node makeDB(char *buffer, FILE *database, Node list){
  Node newNode = emptyNode();
  readline(buffer, 128, database);
  newNode = setEntry(buffer, newNode)
  readline(buffer, 128, database);
  newNode->value = malloc(strlen(buffer) + 1);
  strcpy(newNode->value, buffer);
  newNode->next = list; 
  return newNode;
}

Node updateValue(char *buffer, Node cursor){
  if(cursor != NULL){
    printf("Enter new value: ");
    readline(buffer, 128, stdin);
    free(cursor->value);
    cursor->value = malloc(strlen(buffer) + 1);
    strcpy(cursor->value, buffer);
    puts("Value inserted successfully!");
    return cursor;
  }
 else{
   printf("Could not find an entry matching key \"%s\"!\n", buffer);
   return cursor;
 }
}


Node insertEntry(char *buffer, Node list, Node cursor){
  if(cursor == NULL){
    puts("Key is unique!\n");
    Node newNode = malloc(sizeof(struct node));	
    newNode->key = malloc(strlen(buffer) + 1);
    strcpy(newNode->key, buffer);
    printf("Enter value: ");
    readline(buffer, 128, stdin);
    newNode->value = malloc(strlen(buffer) + 1);
    strcpy(newNode->value, buffer);
    newNode->next = list;
    list = newNode;    
    puts("");
    puts("Entry inserted successfully:");
    printf("key: %s\nvalue: %s\n", list->key, list->value);
    return list;
  }
  return list;
}
